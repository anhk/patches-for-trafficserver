# Add the 'HIT_SSD' state to %<chm>.

diff --git a/trafficserver-5.3.2/iocore/cache/P_CacheInternal.h b/trafficserver-5.3.2/iocore/cache/P_CacheInternal.h
index d06c8d3..83140d2 100644
--- a/trafficserver-5.3.2/iocore/cache/P_CacheInternal.h
+++ b/trafficserver-5.3.2/iocore/cache/P_CacheInternal.h
@@ -249,6 +249,13 @@ struct CacheVC : public CacheVConnection {
     ink_assert(vio.op == VIO::READ);
     return !f.not_from_ram_cache;
   }
+#if TS_USE_INTERIM_CACHE == 1
+  bool
+  is_ssd_cache_hit()
+  {
+    return !!(f.read_from_interim);
+  }
+#endif
   int
   get_header(void **ptr, int *len)
   {
diff --git a/trafficserver-5.3.2/proxy/http/HttpSM.cc b/trafficserver-5.3.2/proxy/http/HttpSM.cc
index 9a91206..11330c6 100644
--- a/trafficserver-5.3.2/proxy/http/HttpSM.cc
+++ b/trafficserver-5.3.2/proxy/http/HttpSM.cc
@@ -2483,6 +2483,10 @@ HttpSM::state_cache_open_read(int event, void *data)
     // ToDo: Should support other levels of cache hits here, but the cache does not support it (yet)
     if (cache_sm.cache_read_vc->is_ram_cache_hit()) {
       t_state.cache_info.hit_miss_code = SQUID_HIT_RAM;
+#if TS_USE_INTERIM_CACHE == 1
+    } else if (((CacheVC*)cache_sm.cache_read_vc)->is_ssd_cache_hit()) {
+      t_state.cache_info.hit_miss_code = SQUID_HIT_SSD;
+#endif
     } else {
       t_state.cache_info.hit_miss_code = SQUID_HIT_DISK;
     }
diff --git a/trafficserver-5.3.2/proxy/http/HttpTransact.cc b/trafficserver-5.3.2/proxy/http/HttpTransact.cc
index 42ac8f7..fc4128c 100644
--- a/trafficserver-5.3.2/proxy/http/HttpTransact.cc
+++ b/trafficserver-5.3.2/proxy/http/HttpTransact.cc
@@ -2717,6 +2717,10 @@ HttpTransact::HandleCacheOpenReadHit(State *s)
   // ToDo: Should support other levels of cache hits here, but the cache does not support it (yet)
   if (SQUID_HIT_RAM == s->cache_info.hit_miss_code) {
     SET_VIA_STRING(VIA_CACHE_RESULT, VIA_IN_RAM_CACHE_FRESH);
+#if TS_USE_INTERIM_CACHE == 1
+  } else if (SQUID_HIT_SSD == s->cache_info.hit_miss_code) {
+    SET_VIA_STRING(VIA_CACHE_RESULT, VIA_IN_SSD_CACHE_FRESH);
+#endif
   } else {
     SET_VIA_STRING(VIA_CACHE_RESULT, VIA_IN_CACHE_FRESH);
   }
@@ -6942,6 +6946,10 @@ HttpTransact::delete_all_document_alternates_and_return(State *s, bool cache_hit
     // ToDo: Should support other levels of cache hits here, but the cache does not support it (yet)
     if (SQUID_HIT_RAM == s->cache_info.hit_miss_code) {
       SET_VIA_STRING(VIA_CACHE_RESULT, VIA_IN_RAM_CACHE_FRESH);
+#if TS_USE_INTERIM_CACHE == 1
+    } else if (s->cache_info.hit_miss_code == SQUID_HIT_SSD) {
+      SET_VIA_STRING(VIA_CACHE_RESULT, VIA_IN_SSD_CACHE_FRESH);
+#endif
     } else {
       SET_VIA_STRING(VIA_CACHE_RESULT, VIA_IN_CACHE_FRESH);
     }
diff --git a/trafficserver-5.3.2/proxy/http/HttpTransact.h b/trafficserver-5.3.2/proxy/http/HttpTransact.h
index e598951..2e1090c 100644
--- a/trafficserver-5.3.2/proxy/http/HttpTransact.h
+++ b/trafficserver-5.3.2/proxy/http/HttpTransact.h
@@ -162,6 +162,7 @@ enum ViaString_t {
   VIA_IN_CACHE_STALE = 'S',
   VIA_IN_CACHE_FRESH = 'H',
   VIA_IN_RAM_CACHE_FRESH = 'R',
+  VIA_IN_SSD_CACHE_FRESH = 'T',
   // server stuff
   VIA_SERVER_STRING = 's',
   VIA_SERVER_ERROR = 'E',
diff --git a/trafficserver-5.3.2/proxy/http/HttpTransactHeaders.cc b/trafficserver-5.3.2/proxy/http/HttpTransactHeaders.cc
index 28cdffc..5c9786e 100644
--- a/trafficserver-5.3.2/proxy/http/HttpTransactHeaders.cc
+++ b/trafficserver-5.3.2/proxy/http/HttpTransactHeaders.cc
@@ -491,6 +491,10 @@ HttpTransactHeaders::generate_and_set_squid_codes(HTTPHdr *header, char *via_str
     // its a cache hit.
     if (via_string[VIA_CACHE_RESULT] == VIA_IN_RAM_CACHE_FRESH) {
       hit_miss_code = SQUID_HIT_RAM;
+#if TS_USE_INTERIM_CACHE == 1
+    } else if (via_string[VIA_CACHE_RESULT] == VIA_IN_SSD_CACHE_FRESH) {
+      hit_miss_code = SQUID_HIT_SSD;
+#endif
     } else { // TODO: Support other cache tiers here
       hit_miss_code = SQUID_HIT_RESERVED;
     }
@@ -527,7 +531,11 @@ HttpTransactHeaders::generate_and_set_squid_codes(HTTPHdr *header, char *via_str

   else {
     if (via_string[VIA_CLIENT_REQUEST] == VIA_CLIENT_IMS) {
-      if ((via_string[VIA_CACHE_RESULT] == VIA_IN_CACHE_FRESH) || (via_string[VIA_CACHE_RESULT] == VIA_IN_RAM_CACHE_FRESH)) {
+      if ((via_string[VIA_CACHE_RESULT] == VIA_IN_CACHE_FRESH) || (via_string[VIA_CACHE_RESULT] == VIA_IN_RAM_CACHE_FRESH)
+#if TS_USE_INTERIM_CACHE == 1
+            || (via_string[VIA_CACHE_RESULT] == VIA_IN_SSD_CACHE_FRESH)
+#endif
+          ) {
         log_code = SQUID_LOG_TCP_IMS_HIT;
       } else {
         if (via_string[VIA_SERVER_RESULT] == VIA_SERVER_NOT_MODIFIED) {
@@ -554,6 +562,10 @@ HttpTransactHeaders::generate_and_set_squid_codes(HTTPHdr *header, char *via_str
           log_code = SQUID_LOG_TCP_HIT;
         } else if (via_string[VIA_CACHE_RESULT] == VIA_IN_RAM_CACHE_FRESH) {
           log_code = SQUID_LOG_TCP_MEM_HIT;
+#if TS_USE_INTERIM_CACHE == 1
+        } else if (via_string[VIA_CACHE_RESULT] == VIA_IN_SSD_CACHE_FRESH) {
+          log_code = SQUID_LOG_TCP_HIT;
+#endif
         } else {
           log_code = SQUID_LOG_TCP_MISS;
         }
@@ -564,7 +576,11 @@ HttpTransactHeaders::generate_and_set_squid_codes(HTTPHdr *header, char *via_str
   ////////////////////////
   // The Hierarchy Code //
   ////////////////////////
-  if ((via_string[VIA_CACHE_RESULT] == VIA_IN_CACHE_FRESH) || (via_string[VIA_CACHE_RESULT] == VIA_IN_RAM_CACHE_FRESH)) {
+  if ((via_string[VIA_CACHE_RESULT] == VIA_IN_CACHE_FRESH) || (via_string[VIA_CACHE_RESULT] == VIA_IN_RAM_CACHE_FRESH)
+#if TS_USE_INTERIM_CACHE == 1
+        || (via_string[VIA_CACHE_RESULT] == VIA_IN_SSD_CACHE_FRESH)
+#endif
+      ) {
     hier_code = SQUID_HIER_NONE;
   } else if (via_string[VIA_DETAIL_ICP_CONNECT] == VIA_DETAIL_ICP_SUCCESS) {
     hier_code = SQUID_HIER_SIBLING_HIT;
